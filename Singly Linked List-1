class Task:
    """A node in the linked list representing a single task."""
    def __init__(self, data):
        self.data = data
        self.next = None

class ToDoList:
    """Manages a to-do list using a singly linked list."""
    def __init__(self):
        self.head = None

    def __repr__(self):
        """Returns the linked list in string format: 'Task1 -> Task2 -> None'."""
        if not self.head:
            return "The to-do list is currently empty. -> None"
        
        tasks = []
        current = self.head
        while current:
            tasks.append(current.data)
            current = current.next
        return " -> ".join(tasks) + " -> None"

    def add_task(self, data):
        """Adds a new task to the end of the list and displays the updated list."""
        new_task = Task(data)
        if not self.head:
            self.head = new_task
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_task

        print(f"Task '{data}' added.")
        print("Updated list:", self) # Automatically calls __repr__

    def remove_task(self, data_to_remove):
        """Removes a specific task from the list and displays the updated list."""
        if not self.head:
            print("The to-do list is empty. Nothing to remove.")
            return

        if self.head.data == data_to_remove:
            self.head = self.head.next
            print(f"Task '{data_to_remove}' removed.")
            print("Updated list:", self) # Automatically calls __repr__
            return

        current = self.head
        while current.next and current.next.data != data_to_remove:
            current = current.next

        if current.next:
            current.next = current.next.next
            print(f"Task '{data_to_remove}' removed.")
            print("Updated list:", self) # Automatically calls __repr__
        else:
            print(f"Task '{data_to_remove}' not found.")
            print("List remains unchanged:", self)

def main():
    my_todo_list = ToDoList()
    
    while True:
        print("\n--- To-Do List Menu ---")
        print("1. Add a new task")
        print("2. Remove a task")
        print("3. View all tasks")
        print("4. Exit")
        
        choice = input("Enter your choice (1-4): ")

        if choice == '1':
            task_desc = input("Enter the new task: ")
            my_todo_list.add_task(task_desc)
        
        elif choice == '2':
            task_to_remove = input("Enter the task to remove: ")
            my_todo_list.remove_task(task_to_remove)
            
        elif choice == '3':
            print("Exiting the program. Goodbye!")
            break
            
        else:
            print("Invalid choice. Please enter a number between 1 and 3.")

if __name__ == "__main__":
    main()
